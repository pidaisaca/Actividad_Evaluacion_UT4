
### **Modelo**
   - **Clase `Habitación`**:
     - Atributos:
       - `numero`: Número único de la habitación (Ej: 101).
       - `tipo`: Tipo de habitación (`INDIVIDUAL`, `DOBLE`, `SUITE`).
       - `precioPorNoche`: Precio correspondiente al tipo de habitación.
       - `estado`: Estado de la habitación (`DISPONIBLE`, `RESERVADA`, `OCUPADA`).
       - `descripcion`: Descripción opcional de la habitación.
     - Métodos:
       - Getters y setters para todos los atributos.
       - Método para cambiar el estado de la habitación.
   
   - **Enum `TipoHabitacion`**:
     - Tipos posibles: `INDIVIDUAL`, `DOBLE`, `SUITE`.

   - **Enum `EstadoHabitacion`**:
     - Estados posibles: `DISPONIBLE`, `RESERVADA`, `OCUPADA`.

   - **Clase `Cliente`**:
     - Atributos:
       - `id`: ID único del cliente.
       - `nombre`: Nombre completo del cliente.
       - `reservasActivas`: Lista de reservas activas del cliente.
       - `historialReservas`: Historial de reservas pasadas.
     - Métodos:
       - Getters y setters para todos los atributos.
       - Método para agregar una nueva reserva activa.
       - Método para cancelar una reserva activa.
   
   - **Clase `Reserva`**:
     - Atributos:
       - `idReserva`: ID único de la reserva.
       - `habitacion`: Habitación reservada.
       - `cliente`: Cliente que realizó la reserva.
       - `checkIn`: Fecha de check-in.
       - `checkOut`: Fecha de check-out.
       - `precioTotal`: Precio total de la reserva (basado en las fechas y el precio por noche de la habitación).
     - Métodos:
       - Calcular el precio total de la reserva.
       - Validaciones de fechas (check-in y check-out).

### **Controlador**
   - **Clase ControladorReserva**:
     - Métodos:
       - Crear una reserva.
       - Cancelar una reserva (validando si aún no ha comenzado).
       - Validar que un cliente no tenga más de 3 reservas activas.
       - Validar que una habitación no esté reservada en el rango de fechas.
       - Verificar si una reserva puede ser cancelada (fecha de check-in aún no pasada).
   
   - **Clase `ControladorHabitacion`**:
     - Métodos:
       - Buscar habitación por número, tipo o estado.
       - Cambiar el estado de la habitación (disponible, reservada, ocupada).
   
   - **Clase `ControladorCliente**:
     - Métodos:
       - Buscar un cliente por su ID.
       - Listar todas las reservas activas de un cliente.
       - Mostrar el historial de reservas de un cliente.

### **Vista**
   - **Interfaz de usuario en consola**:
     - Mostrar un menú principal para gestionar las reservas, habitaciones y clientes.
     - Mostrar los resultados de búsqueda de habitaciones, clientes y reservas.
     - Mostrar un resumen de habitaciones y clientes.
     - Pedir datos al usuario para crear reservas y cancelarlas.
     - Mostrar mensajes de error si algo no es válido (fecha incorrecta, cliente con más de 3 reservas, etc.).

### **Validaciones y Excepciones**
   - **Excepciones personalizadas**:
     - `ReservaNoDisponibleException`: Lanzada cuando no se puede realizar una reserva por falta de disponibilidad.
     - `ClienteNoEncontradoException`: Lanzada cuando no se encuentra un cliente al buscar por ID.
     - Excepciones estándar de Java:
       - `IllegalArgumentException`: Para validaciones generales de argumentos inválidos.
       - `NullPointerException`: Para manejar nulos de objetos.
   
   - **Validaciones**:
     - Impedir que se hagan reservas en fechas pasadas.
     - Asegurarse de que un cliente no tenga más de 3 reservas activas.
     - Verificar que el check-out no sea antes del check-in.
     - Asegurar que las habitaciones no se solapen en las fechas de reserva.
     - Validar que una reserva solo pueda ser cancelada si aún no ha comenzado.

### **Funciones Adicionales**
   - [ ] **Resumen del hotel**:
     - Método que liste todas las habitaciones y su estado actual.
     - Método que liste todos los clientes y las habitaciones que tienen reservadas.



---------------------------------------------------------------------------------


---

## **Guía de Pasos a Seguir y División del Trabajo**

---

### 

#### 
1. **Diseñar la clase `Habitacion`**:
   - Atributos: `numero`, `tipo`, `precioPorNoche`, `estado`, `descripcion`.
   - Métodos: Getters y setters, cambiar estado.
   - Implementar el `enum` `TipoHabitacion` (INVIDIVIDUAL, DOBLE, SUITE).
   - Implementar el `enum` `EstadoHabitacion` (DISPONIBLE, RESERVADA, OCUPADA).

####
2. **Diseñar la clase `Cliente`**:
   - Atributos: `id`, `nombre`, `reservasActivas`, `historialReservas`.
   - Métodos: Getters y setters, agregar/cancelar reserva.
   - Implementar la validación de que un cliente no tenga más de 3 reservas activas.

---

###

1. **Diseñar la clase `Reserva`**:
   - Atributos: `idReserva`, `habitacion`, `cliente`, `checkIn`, `checkOut`, `precioTotal`.
   - Métodos: Calcular precio total, validaciones de fechas (check-in/check-out).
   - Validación: Impedir que un cliente haga una reserva en fechas pasadas y verificar que no haya reservas solapadas para una habitación.


2. **Diseñar los controladores**:
   - **ControladorHabitacion**:
     - Métodos: Buscar habitaciones por número, tipo, estado; cambiar estado.
   - **ControladorCliente**:
     - Métodos: Buscar cliente por ID, listar reservas activas, historial de reservas.
   
---



1. **Desarrollar la clase `Vista` para la interacción por consola**:
   - Crear un menú principal.
   - Mostrar mensajes claros al usuario para cada operación (hacer reserva, cancelar, buscar habitación, etc.).
   - Validar entradas y mostrar errores si es necesario (por ejemplo, fecha de reserva incorrecta, más de 3 reservas activas).

2. **Integrar la vista con el controlador de habitaciones y clientes**:
   - Mostrar las opciones del menú: realizar reserva, cancelar reserva, consultar habitaciones, etc.
   - Interactuar con el usuario para ingresar la información (fecha de reserva, ID del cliente, número de habitación, etc.).

---


1. **Implementar excepciones personalizadas**:
   - `ReservaNoDisponibleException`: Para cuando no se pueda realizar una reserva debido a la falta de disponibilidad.
   - `ClienteNoEncontradoException`: Para cuando un cliente no se encuentra al buscar por ID.

2. **Validar los siguientes casos**:
   - Evitar que se hagan reservas en fechas pasadas.
   - Asegurarse de que un cliente no tenga más de 3 reservas activas.
   - Validar que el check-out no sea antes que el check-in.
   - Validar que una habitación no esté ocupada en el rango de fechas.
   - Manejar excepciones al realizar estas validaciones.

---

1. **Probar la creación y cancelación de reservas**:
   - Verificar que los métodos para crear y cancelar reservas funcionen correctamente.
   - Comprobar que las validaciones se aplican correctamente (reservas pasadas, clientes con más de 3 reservas, etc.).

2. **Probar la búsqueda de habitaciones y clientes**:
   - Verificar que los métodos de búsqueda de habitaciones por número, tipo y estado funcionen correctamente.
   - Asegurarse de que el sistema permita ver el historial de reservas de un cliente.

---


#### **Tareas para ambos**:
1. **Revisar el código**:
   - Asegurarse de que todo el código esté bien documentado.
   - Realizar refactorizaciones si es necesario para mejorar la legibilidad.

2. **Crear el archivo `README.md`**:
   - Incluir una descripción breve del proyecto.
   - Incluir instrucciones claras sobre cómo ejecutar el proyecto.
   - Añadir ejemplos de uso (cómo crear una reserva, buscar habitaciones, cancelar una reserva).

3. **Realizar pruebas finales**:
   - Asegurarse de que todos los casos de prueba sean ejecutados y validados correctamente.
   - Verificar que el sistema funcione correctamente para clientes, reservas y habitaciones.

4. **Comprimir y entregar el proyecto**:
   - Subir el código a GitHub.
   - Comprimir el proyecto en un archivo ZIP con el formato requerido y entregarlo.

---

### **Resumen de la División de Trabajo:**

#### **Persona 1**:
- **Fase 2**: Clase `Habitacion` y `TipoHabitacion`/`EstadoHabitacion`.
- **Fase 3**: Clase `Reserva` y validaciones.
- **Fase 4**: Implementación de la vista para consola y menú.
- **Fase 5**: Implementación de excepciones personalizadas.
- **Fase 6**: Pruebas de creación y cancelación de reservas.

#### **Persona 2**:
- **Fase 2**: Clase `Cliente`.
- **Fase 3**: Controladores (`ControladorHabitacion`, `ControladorCliente`).
- **Fase 4**: Integración de la vista con los controladores.
- **Fase 5**: Validaciones de fechas, reservas solapadas y máximo de 3 reservas activas.
- **Fase 6**: Pruebas de búsqueda de habitaciones y clientes.

---





